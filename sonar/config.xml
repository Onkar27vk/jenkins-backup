<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1436.vfa_244484591f">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3964.v0767b_4b_a_0b_fa_">
    <script>pipeline {
    agent any
    
    tools {
        maven &apos;maven3&apos;
    }
    
    environment {
        IMAGE_NAME = &quot;adijaiswal/bankapp&quot;
        TAG = &quot;${env.BUILD_NUMBER}&quot; 
        SONAR_SCANNER= tool &apos;sonar-scanner&apos;
    }

    stages {       
        stage(&apos;Compile&apos;) {
            steps {
                sh &quot;mvn compile&quot;
            }
        }
        
        stage(&apos;Test&apos;) {
            steps {
                echo &apos;Hello World&apos;
            }
        }
        
        stage(&apos;SOnarQube&apos;) {
            steps {
                withSonarQubeEnv(&apos;sonar&apos;) {
                    sh &apos;&apos;&apos; $SONAR_SCANNER/bin/sonar-scanner -Dsonar.projectKey=Multitier -Dsonar.projectName=Multitier \
                    -Dsonar.java.binaries=target &apos;&apos;&apos;
                }
            }
        }
        
        stage(&apos;Quality Gate Check&apos;) {
            steps {
                timeout(time: 1, unit: &apos;HOURS&apos;) {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        
        stage(&apos;Trivy FS&apos;) {
            steps {
                sh &quot;trivy fs --format table -o fs.html .&quot;
            }
        }
        
        stage(&apos;Build&apos;) {
            steps {
                sh &quot;mvn package -DskipTests=true&quot;
            }
        }
        
        stage(&apos;Publish artifacts&apos;) {
            steps {
                withMaven(globalMavenSettingsConfig: &apos;maven-settings&apos;, jdk: &apos;&apos;, maven: &apos;maven3&apos;, mavenSettingsConfig: &apos;&apos;, traceability: true) {
                    sh &quot;mvn deploy -DskipTests=true&quot;
                }
            }
        }
        
        stage(&apos;Build Docker Image&apos;) {
            steps {
                script {
                    withDockerRegistry(credentialsId: &apos;docker-cred&apos;) {
                        sh &quot;docker build -t ${IMAGE_NAME}:${TAG} .&quot;
                    }
                }
            }
        }
        
         stage(&apos;Trivy SCan Docker Image&apos;) {
            steps {
                sh &quot;trivy image --format table -o image.html ${IMAGE_NAME}:${TAG}&quot;
            }
        }
        
        stage(&apos;Push Docker Image&apos;) {
            steps {
                script {
                    withDockerRegistry(credentialsId: &apos;docker-cred&apos;) {
                        sh &quot;docker push ${IMAGE_NAME}:${TAG}&quot;
                    }
                }
            }
        }
        
        stage(&apos;Update Kubernetes Manifest&apos;) {
            steps {
                script {
                    // Replace the Docker image tag in line 58 of the ds.yml file
                    sh &quot;&quot;&quot;
                    sed -i &apos;58s|image: ${IMAGE_NAME}:.*|image: ${IMAGE_NAME}:${TAG}|&apos; ds.yml
                    &quot;&quot;&quot;
                }
            }
        }
        
        stage(&apos;Commit and Push Changes&apos;) {
    steps {
        script {
            // Use GitHub credentials from Jenkins
            withCredentials([usernamePassword(credentialsId: &apos;git-cred&apos;, usernameVariable: &apos;GIT_USERNAME&apos;, passwordVariable: &apos;GIT_PASSWORD&apos;)]) {
                sh &quot;&quot;&quot;
                git config --global user.email &quot;your-email@example.com&quot;
                git config --global user.name &quot;Aditya Jaiswal&quot;
                git remote set-url origin https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/jaiswaladi246/Multi-Tier-Java.git
                git pull origin main
                git add ds.yml
                git commit -m &quot;Update image to ${IMAGE_NAME}:${TAG}&quot;
                git push origin main
                &quot;&quot;&quot;
            }
        }
    }
}

         stage(&apos;K8 Deployment&apos;) {
            steps {
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;devopsshack-cluster&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-cred&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;https://761EA1E7FE48A0FB44798AAB35344BB7.gr7.ap-south-1.eks.amazonaws.com&apos;) {
                        sh &quot;kubectl apply -f ds.yml -n webapps&quot;
                        sleep 30
                    }
            }
        }
        
        stage(&apos;Verify K8 Deployment&apos;) {
            steps {
                withKubeConfig(caCertificate: &apos;&apos;, clusterName: &apos;devopsshack-cluster&apos;, contextName: &apos;&apos;, credentialsId: &apos;k8-cred&apos;, namespace: &apos;webapps&apos;, restrictKubeConfigAccess: false, serverUrl: &apos;https://761EA1E7FE48A0FB44798AAB35344BB7.gr7.ap-south-1.eks.amazonaws.com&apos;) {
                        sh &quot;kubectl get pods -n webapps&quot;
                        sh &quot;kubectl get svc -n webapps&quot;
                       
                    }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>